---
- name: Ensure CKAN prerequisite packages
  apt:
    name:
      - gcc
      - libpq-dev
      - libxslt1-dev
      - python-dev
      - python-virtualenv
      - zlib1g-dev
      - libgeos-c1v5
      - supervisor
      - apache2
      - libapache2-mod-wsgi
      - libffi-dev
      - libxml2
      - libxml2-dev
      - unzip
      - zip
    state: latest

- name: Ensure CKAN profiling packages
  apt:
    name:
      - graphviz
      - graphviz-dev
    state: latest
  when: ckan_profiling_enabled

- name: Ensure cache path
  file:
    path: "{{ ckan_cache_path }}"
    state: directory

- name: Ensure temp directory for extensions
  file:
    path: "{{ ckan_extension_sync_path }}"
    state: directory

- name: Ensure cache directory for pip
  file:
    path: /home/vagrant/.cache/pip/http
    state: directory
  when: ckan_deployment_environment_id == "vagrant"

- include: extension.yml
  with_items: "{{ ckan_extensions }}"

- name: Copy credentials token
  copy:
    src: "{{ ckan_google_credentials }}"
    dest: "{{ ckan_cache_path }}/token.dat"
    mode: "0644"
    owner: root
    group: "{{ ckan_www_group }}"
  when: ckan_google_analytics != false

- name: Add analytics fetching to cron
  cron:
    name: "analytics"
    minute: "*/5"
    hour: "0-3"
    job: "{{ ckan_virtual_environment }}/bin/paster --plugin=ckanext-googleanalytics googleanalytics loadanalytics {{ckan_cache_path}}/token.dat --config={{ ckan_ini }}"
  when: ckan_google_analytics != false

- name: Ensure log path exists
  file:
    path: "{{ ckan_log_path }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Ensure log file exists
  file:
    path: "{{ ckan_log_path }}/ckan.log"
    state: touch
    owner: "{{ ckan_www_user }}"
    group: "{{ ckan_www_group }}"
    mode: 0640

- name: Configure logrotation for CKAN
  copy:
    dest: /etc/logrotate.d/ckan
    content: "{{ ckan_logrotate_conf }}"
    mode: 0644
    owner: root
    group: root

- name: Install CKAN
  pip:
    name: "git+https://github.com/ckan/ckan.git@ckan-{{ ckan_version }}#egg=ckan"
    virtualenv: "{{ ckan_virtual_environment }}"
    extra_args: "--exists-action=s -e"

- name: Install CKAN requirements
  pip:
    requirements: "{{ ckan_virtual_environment }}/src/ckan/requirements.txt"
    virtualenv: "{{ ckan_virtual_environment }}"

- name: Install CKAN dev requirements
  pip:
    requirements: "{{ ckan_virtual_environment }}/src/ckan/dev-requirements.txt"
    virtualenv: "{{ ckan_virtual_environment }}"
  when: ckan_deployment_environment_id == "vagrant"

- name: Install CKAN profiling tool
  pip:
    name: "git+http://github.com/vrk-kpa/linesman#egg=linesman"
    virtualenv: "{{ ckan_virtual_environment }}"
  when: ckan_profiling_enabled

- name: Copy override requirements
  copy:
    dest: "{{ ckan_cache_path }}/override-requirements"
    content: "{{ ckan_override_requirements | join('\n') }}"
    mode: "0644"
    owner: root
    group: root

- name: Install override requirements
  pip:
    requirements: "{{ ckan_cache_path }}/override-requirements"
    virtualenv: "{{ ckan_virtual_environment }}"

- name: Apply CKAN patches
  patch:
    src: "{{ item }}"
    basedir: "{{ ckan_source_path }}"
    strip: 1
  with_fileglob: "files/patches/*"

- name: Create CKAN files path
  file:
    path: "{{ item }}"
    state: directory
    mode: "0770"
    owner: "{{ ckan_www_user }}"
    group: "{{ ckan_www_group }}"
    recurse: true
  with_items:
    - "/etc/ckan/default"
    - "{{ ckan_files_path }}"
    - "{{ ckan_files_path }}/storage/uploads"
    - "{{ ckan_source_path }}/ckan/public/base/i18n"
    - "{{ ckan_resource_cache_path }}"

- name: Disable Nginx sites
  file:
    path: "/etc/nginx/sites-enabled/{{ item }}"
    state: absent
  with_items:
    - ckan
    - default
  notify: Restart Nginx

- name: Disable Apache sites
  file:
    path: "/etc/apache2/sites-enabled/{{ item }}"
    state: absent
  with_items:
    - 000-default.conf
    - default-ssl.conf

- name: Copy ports configuration
  template:
    src: "ports.conf.j2"
    dest: "/etc/apache2/ports.conf"
    mode: "0644"
    owner: root
    group: root

- name: Enable Apache2 modules
  apache2_module:
    name: "{{ item }}"
  with_items:
    - rewrite
    - headers

- name: Copy Apache configuration
  template:
    src: "apache2.j2"
    dest: "/etc/apache2/sites-available/ytp.conf"
    mode: "0644"
    owner: root
    group: root

- name: Enable Apache configuration
  file:
    src: "/etc/apache2/sites-available/ytp.conf"
    dest: /etc/apache2/sites-enabled/ytp.conf
    state: link
    owner: root
    group: root
  notify: Restart Apache

- name: Setup CKAN configuration
  template:
    src: "ckan.ini.j2"
    dest: "{{ ckan_ini }}"
    mode: "0640"
    owner: root
    group: "{{ ckan_www_group }}"

- name: Setup Apache WSGI script
  template:
    src: "apache.wsgi.j2"
    dest: /etc/ckan/default/apache.wsgi
    mode: "0640"
    owner: root
    group: "{{ ckan_www_group }}"

- name: Install python packages to support SNI in requests
  pip:
    name:
      - cryptography
      - pyOpenSSL
      - ndg-httpsclient
      - pyasn1
    virtualenv: "{{ ckan_virtual_environment }}"

- name: Copy CKAN configuration files
  copy:
    src: who.ini
    dest: "{{ ckan_who_ini }}"
    mode: "0644"
    owner: root
    group: "{{ ckan_www_group }}"

- name: Copy CKAN wrapper file
  copy:
    src: ckan.py
    dest: /usr/bin/ckan
    mode: "0755"
    owner: root
    group: root

# Background services can block database update
- name: Stop supervisor services
  command: supervisorctl stop all

- name: re-minify CKAN javascript files
  shell: ./bin/paster --plugin=ckan minify {{ ckan_source_path }}/ckan/public/base/javascript "--config={{ ckan_ini }}" chdir="{{ ckan_virtual_environment }}"

- name: Ensure Apache restart
  service:
    state: restarted
    name: apache2

- name: Ensure Nginx is restarted
  service:
    name: nginx
    state: restarted

- name: Copy supervisor configuration
  template:
    src: "supervisor.conf.j2"
    dest: "/etc/supervisor/conf.d/ytp.conf"
    mode: "0644"
    owner: root
    group: root
  register: supervisor_configuration
  notify:
    - Restart Gather
    - Restart Fetch

- name: Copy data structures for CKAN UI options
  copy:
    src: "{{ item }}"
    dest: "{{ ckan_files_path }}/{{ item | basename }}"
    mode: "0644"
    owner: root
    group: "{{ ckan_www_group }}"
  register: copy_ckan_ui_data
  with_fileglob: files/datastructures/*

- include: database.yml

- name: Copy SQL files
  template:
    src: "{{ item }}"
    dest: "/tmp/{{ item }}"
    owner: postgres
    group: postgres
    mode: "0640"
  with_items: "{{ ckan_sql_files_to_execute }}"

- name: Execute SQL files
  shell: cat /tmp/{{ item }} | psql --set ON_ERROR_STOP=1
  become_user: postgres
  become: true
  with_items: "{{ ckan_sql_files_to_execute }}"
  when: ckan_postgres_installed_locally

- name: Execute SQL files
  shell: cat /tmp/{{ item }} | psql -d datastore_default -h "{{ ckan_postgres.server.host }}" -U "{{ ckan_postgres_admin_user }}" --set ON_ERROR_STOP=1
  with_items: "{{ sql_files_to_execute }}"
  environment:
    PGPASSWORD: "{{ ckan_postgres_admin_password }}"
  when: not ckan_postgres_installed_locally

- include: translations.yml
- include: restart.yml
