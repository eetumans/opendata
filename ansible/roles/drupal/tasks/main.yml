---


- name: Remove old drush6 modules
  file:
    state: absent
    path: "/root/.drush"

# Disable removed modules, modules must be removed from removed_extensions after they are removed from composer.json

- name: Disable removed drupal extra modules
  command: ../vendor/drush/drush/drush pm:uninstall -y {{ item }}
  args:
    chdir: "{{ drupal8_root }}/web"
  with_items: "{{ removed_extensions }}"
  when: "removed_extensions is defined"

### Get PHP ###

- name: Get PHP and required extensions
  become: true
  action: apt
    pkg="{{ item }}"
    state=latest
  with_items:
    - php
    - php-fpm
    - php-gd
    - php-pgsql
    - php-xml # installs "dom"
    - php7.0-mbstring
    - php-curl
    - php-intl

### Socket setup ###

- name: Set PHP pathinfo
  become: true
  ini_file: dest=/etc/php/7.0/fpm/php.ini section=PHP option=cgi.fix_pathinfo value=0

- name: Set socket to listen
  become: true
  ini_file: dest=/etc/php/7.0/fpm/pool.d/www.conf section=www option=listen value=/tmp/phpfpm.socket

- name: Set socket listen owner
  become: true
  ini_file: dest=/etc/php/7.0/fpm/pool.d/www.conf section=www option=listen.owner value={{ www_user }}

- name: Set socket listen group
  become: true
  ini_file: dest=/etc/php/7.0/fpm/pool.d/www.conf section=www option=listen.group value={{ www_group }}

- name: Set socket listen mode
  become: true
  ini_file: dest=/etc/php/7.0/fpm/pool.d/www.conf section=www option=listen.mode value=0660

### Install Composer ###

- name: Download Composer
  script: install_composer.sh
  tags:
    - composer

- name: Move Composer globally
  become: true
  command: mv composer.phar /usr/local/bin/composer
  tags:
    - composer

- name: Set Composer permissions
  become: true
  file:
    path: /usr/local/bin/composer
    mode: "a+x"
  tags:
    - composer

### Composer magic ###

- name: Install dependencies for dependency management (>.<)
  composer:
    command: require
    global_command: yes
    arguments: alchemy/zippy:0.4.3

- name: Create root pgpass
  template: src=pgpass8.j2 dest=/root/.pgpass mode="0600" owner=root group=root

- name: Check if drupal 8 is already initialized on database
  command: >
    psql -h {{ postgres.server.host }}
    -tAc "SELECT 1 FROM pg_tables WHERE schemaname='public' AND tablename='node'"
    {{ postgres.databases.drupal8.name }} {{ postgres.users.drupal8.username }}
  register: drupal8_database_initialized


- name: Create Drupal installation directories if they don't exist
  become: true
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ www_user }}"
    group: "{{ www_group }}"
    mode: 0755
  with_items:
    - "{{ cache_path }}/drupal"
    - "/var/www/.composer"
    - "{{ drupal8_root }}"
    - "{{ drupal8_root }}/site_config"


- name: Synchronize drupal8 project
  synchronize:
    src: ../drupal8/
    dest: "{{ drupal8_root }}/"

- name: Ensure drupal root ownership
  file:
    path: "{{ drupal8_root }}"
    owner: "{{ www_user }}"
    group: "{{ www_group }}"
    mode: 0755
    recurse: yes
    follow: no

- name: Remove composer lock file if it exists
  file:
     path: "{{ drupal8_root }}/composer.lock"
     state: absent

- name: Install Drupal dependencies
  become_user: "{{ www_user }}"
  composer:
    command: install
    working_dir: "{{ drupal8_root }}"


- block:

  ### Database backup

  - name: Create root pgpass
    template: src=pgpass.j2 dest=/root/.pgpass mode="0600" owner=root group=root

  - name: Check if drupal 7 is already initialized on database
    command: >
      psql -h {{ postgres.server.host }}
      -tAc "SELECT 1 FROM pg_tables WHERE schemaname='public' AND tablename='node'"
      {{ postgres.databases.drupal.name }} {{ postgres.users.drupal.username }}
    register: drupal7_database_initialized

  #- name: Dump drupal db
  #  shell: drush sql-dump > /tmp/dump.sql chdir="{{ drupal8_root }}" creates=/tmp/dump.sql
  #  when: "'1' in drupal_database_initialized.stdout"
  #  register: drupal_database_dumped

  ### Drupal installation ###

  #- name: Copy Drupal settings
  #  become: true
  #  template: src=settings.php.j2
  #    dest={{ drupal8_root }}/web/sites/default/settings.php
  #    owner=vagrant
  #    group=vagrant

  - name: Install a clean Drupal database
    command: ../vendor/drush/drush/drush site-install -y standard --db-url=pgsql://{{ postgres.users.drupal8.username }}:{{ postgres.users.drupal8.password }}@{{ postgres.server.host }}:{{ postgres.server.port }}/{{ postgres.databases.drupal8.name }} --account-name={{ admin.username }} --account-pass={{ admin.password }} --site-name={{ drupal_site_name }}
    args:
      chdir: "{{ drupal8_root }}/web"

  ### Migrate Drupal 7, if present ###

  - block:

    - name: Patch migration module
      patch:
        src: "migrate_upgrade.Drush-9-port-of-commands.patch"
        basedir: "{{ drupal8_root }}/web/modules/contrib/migrate_upgrade"
        strip: 1

    - name: Enable migration modules
      command: ../vendor/drush/drush/drush en -y {{ item }}
      args:
        chdir: "{{ drupal8_root }}/web"
      with_items:
          - migrate_plus
          - migrate_upgrade
          - migrate_tools

    - name: Configure Drupal 7 database migration
      command: ../vendor/drush/drush/drush migrate-upgrade --legacy-db-url=pgsql://{{ postgres.users.drupal.username }}:{{ postgres.users.drupal.password }}@{{ postgres.server.host }}:{{ postgres.server.port }}/{{ postgres.databases.drupal.name }} --configure-only
      args:
        chdir: "{{ drupal8_root }}/web"

    - name: Migrate Drupal 7 Database
      command: ../vendor/drush/drush/drush migrate-import {{ item }}
      args:
        chdir: "{{ drupal8_root }}/web"
      with_items:
        - "d7_user_role"
        - "d7_user"
    when: "'1' in drupal7_database_initialized.stdout"

  when: "'1' not in drupal8_database_initialized.stdout"

### Translations ###

- name: Enable Drupal language modules
  command: ../vendor/drush/drush/drush en -y {{ item }}
  args:
    chdir: "{{ drupal8_root }}/web"
  with_items:
    - config_translation
    - content_translation
    - language
    - locale
    - drush_language

- name: Add additional languages
  command: ../vendor/drush/drush/drush language-add -y {{ item }}
  args: 
    chdir: "{{ drupal8_root }}/web"
  with_items:
    - fi
    - sv

- name: Make Finnish default language
  command: ../vendor/drush/drush/drush language-default -y fi
  args: 
    chdir: "{{ drupal8_root }}/web"

### Custom modules ###
# Contrib modules should be installed with Composer, not here #

- name: Synchronize custom modules
  synchronize:
    src: "../modules/{{ item.src_name }}/"
    dest: "{{ drupal8_root }}/web/modules/{{ item.module_name }}"
  when: deployment_environment_id != "vagrant"
  with_items: "{{ custom_modules }}"

- name: Symlink custom modules
  file:
    state: link
    src: "/vagrant/modules/{{ item.src_name }}/"
    dest: "{{ drupal8_root }}/web/modules/{{ item.module_name }}"
  when: deployment_environment_id == "vagrant"
  with_items: "{{ custom_modules }}"


### Theme ###

- name: Enable base theme
  command: ../vendor/drush/drush/drush then -y bootstrap
  args:
    chdir: "{{ drupal8_root }}/web"

- name: Synchronize custom theme
  synchronize:
    src: ../modules/avoindata-drupal-theme/
    dest: "{{ drupal8_root }}/web/themes/avoindata"
  when: deployment_environment_id != "vagrant"

- name: Symlink custom theme
  file:
    state: link
    src: /vagrant/modules/avoindata-drupal-theme/
    dest: "{{ drupal8_root }}/web/themes/avoindata"
  when: deployment_environment_id == "vagrant"

### Install external modules ###

- name: Enable Drupal extra modules
  command: ../vendor/drush/drush/drush en -y {{ item }}
  args:
    chdir: "{{ drupal8_root }}/web"
  with_items:
    - twig_tweak
    - fontawesome_menu_icons
    - smtp
    - pathauto ### Used for URL alias settings
    - easy_breadcrumb
    - twig_field_value
    - disqus

# Not symlinked because nested symlinks don't work on windows
- name: Synchronize fonts
  synchronize:
    src: ../modules/ytp-assets-common/src/fonts/
    dest: "{{ drupal8_root }}/web/themes/avoindata/fonts"

# These need to be enabled after installing external modules (at least pathauto), because
# of dependencies. 
- name: Enable custom modules
  command: ../vendor/drush/drush/drush en -y {{ item.machine_name }}
  args:
    chdir: "{{ drupal8_root }}/web"
  with_items: "{{ custom_modules }}"

#TODO: This should be fixed so that it's not necessary to delete configs like this
- name: Delete breadcrumb settings
  command: ../vendor/drush/drush/drush config-delete easy_breadcrumb.settings
  args:
    chdir: "{{ drupal8_root }}/web"

- name: Enable custom theme
  command: ../vendor/drush/drush/drush then -y avoindata
  args:
    chdir: "{{ drupal8_root }}/web"

- name: Set default theme
  command: ../vendor/drush/drush/drush config-set -y system.theme default avoindata
  args:
    chdir: "{{ drupal8_root }}/web"

- name: Reload theme configurations
  command: ../vendor/drush/drush/drush -y cim --partial --source {{ drupal8_root }}/web/themes/avoindata/config/install
  args:
    chdir: "{{ drupal8_root }}/web"

- name: Reload custom module configurations
  command: ../vendor/drush/drush/drush -y cim --partial --source {{ drupal8_root }}/web/modules/{{ item }}/config/install
  args:
    chdir: "{{ drupal8_root }}/web"
  with_items:
    - avoindata-guide

- name: Copy setting template files
  template:
    src: "drupal_site_config/{{ item.src }}"
    dest: "{{ drupal8_root }}/site_config/{{ item.dest }}"
  with_items:
    - { src: smtp.settings.yml.j2, dest: smtp.settings.yml }
    - { src: disqus.settings.yml.j2, dest: disqus.settings.yml}

- name: Import drupal settings
  command: ./vendor/bin/drush -y cim --partial --source {{ drupal8_root}}/site_config
  args:
    chdir: "{{ drupal8_root }}"

- name: Configure general site settings regarding email
  command: ../vendor/drush/drush/drush config:set system.site {{ item.key }} {{ item.value }}
  args:
    chdir: "{{ drupal8_root }}/web"
  with_items:
    - { key: name, value: "{{ email_domain }}"}
    - { key: mail, value: "{{ email_from }}"}

- name: Update drupal translations
  command: "{{ drupal8_root }}/vendor/drush/drush/drush language:import:translations {{ playbook_dir }}/roles/drupal/files/i18n/{{ item }}/drupal8.po --langcode {{ item }}"
  with_items:
    - "fi"
    - "sv"
  tags:
    - drupal

# Without this, the added translatable status for content types like guide page, doesn't work and
# fails because of an SQL error. 
- name: Run entity updates for database
  command: "{{ drupal8_root }}/vendor/drush/drush/drush updatedb --entity-updates -y"

### User roles

# Item argument is used two times, because the other one sets a machine readable name and the other one a human readable name
- name: Create user roles
  command: vendor/drush/drush/drush role-create "{{ item }}" "{{ item }}" chdir="{{ drupal8_root }}"
  with_items: 
  - "{{ drupal_editor_rolename }}"
  - "{{ drupal_ckan_admin_rolename }}"
  - "{{ drupal_publisher_rolename }}"
  ignore_errors: True
  tags:
  - drupal

- name: Set user roles
  command: vendor/drush/drush/drush user-add-role "{{ item.role }}" "{{ item.username }}" chdir="{{ drupal8_root }}"
  with_items: "{{ drupal_roles }}"
  tags:
  - drupal

### Finishing touches ###

- name: Restart PHP-FPM
  become: true
  service: name=php7.0-fpm state=restarted

- name: Deploy favicon
  copy: src="favicon.ico" 
    dest={{ drupal8_root }}/web/favicon.ico

- name: Deploy robots.txt
  copy: src={{ search_engine_robots_filename }}
    dest={{ drupal8_root }}/web/robots.txt

- name: Take site out of maintenance mode
  become: true
  file:
    state: absent
    path: /var/www/maintenance

