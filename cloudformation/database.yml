---
AWSTemplateFormatVersion: '2010-09-09'
Description: opendata databases

Parameters:
  EnvironmentName:
    Type: String
    Default: infratest
    AllowedValues:
      - infratest
      - dev
      - alpha
      - beta
      - www

  DatabaseSubnets:
    Description: Database and EFS mount target subnets
    Type: List<AWS::EC2::Subnet::Id>
  AdminUsername:
    Description: Database admin username
    Type: String
    MinLength: 1
    Default: ckan_admin
  AdminPassword:
    Description: Database admin password
    Type: String
    NoEcho: true
    MinLength: 8
  SnapshotIdentifier:
    Description: Optional snapshot to restore
    Type: String
    Default: ""
  BackupRetention:
    Description: The number of days to retain automated backups. Setting this parameter to 0 disables automated backups.
    Type: String
    Default: "7"
    AllowedPattern: ^([0-9]|[12][0-9]|3[05])$
    ConstraintDescription: Valid range is 0-35 
  MultiAZSetup:
    Description: Specifies if the DB instance is a Multi-AZ deployment
    Type: String
    Default: false
    AllowedValues: [true, false]

Conditions:
  UseDBSnapshot: !Not [!Equals [!Ref SnapshotIdentifier,  ""]]

Resources:
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 50
      Engine: postgres
      BackupRetentionPeriod: !Ref BackupRetention
      DBInstanceClass: db.t2.small
      EngineVersion: 9.5.10
      MultiAZ: !Ref MultiAZSetup
      StorageType: gp2
      DBInstanceIdentifier: !Sub avoindata-${EnvironmentName}
      DBSnapshotIdentifier: !If [ UseDBSnapshot, !Ref SnapshotIdentifier, !Ref "AWS::NoValue" ]
      MasterUsername: !Ref AdminUsername
      MasterUserPassword: !Ref AdminPassword
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups:
        - !GetAtt DatabaseSecurityGroup.GroupId

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable DB access

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for databases
      SubnetIds: !Ref DatabaseSubnets

  DatasetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub avoindata-${EnvironmentName}-datasets
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
            - GET
            AllowedOrigins:
              - "*"

  DatasetBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DatasetBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${DatasetBucket}/*"
            Principal: "*"

  EFSFileSystem:
    Type: AWS::EFS::FileSystem

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt EFSSecurityGroup.GroupId
      SubnetId: !Select [0, !Ref DatabaseSubnets]

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt EFSSecurityGroup.GroupId
      SubnetId: !Select [1, !Ref DatabaseSubnets]

  EFSMountTarget3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt EFSSecurityGroup.GroupId
      SubnetId: !Select [2, !Ref DatabaseSubnets]

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable EFS access

Outputs:
  DatabaseSecurityGroup:
    Value: !Ref DatabaseSecurityGroup
  DatasetBucket:
    Value: !Ref DatasetBucket
