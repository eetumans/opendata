AWSTemplateFormatVersion: "2010-09-09"
Description: opendata application infrastructure

Parameters:
  EnvironmentName:
    Type: String
    Default: infratest
    AllowedValues:
      - infratest
      - dev
      - alpha
      - beta
      - www
  InstanceType:
    Description: EC2 instance type for the application servers
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: "Must be one of the following EC2 instance types: t2.micro, t2.small, t2.medium, t2.large"
  DatabaseSecurityGroup:
    Description: Security group of the RDS database
    Type: AWS::EC2::SecurityGroup::Id
  EFSFileSystem:
    Description: Name of the EFS filesystem
    Type: String
    MinLength: 1
  EFSSecurityGroup:
    Description: Security group of the EFS filesystem
    Type: AWS::EC2::SecurityGroup::Id
    MinLength: 1
  HostedZoneId:
    Description: Zone ID for the DNS record
    Type: AWS::Route53::HostedZone::Id
    Default: Z1LTTU8RWIW15X
    MinLength: 1
  HostedZoneIdAlternate:
      Description: "[Optional] Zone ID for the DNS record"
      Type: String
      AllowedPattern: "^$|^[A-Z0-9]{14}"
  WhitelistedIpAddressTRE:
    Type: String
    Default: 193.64.225.83/32
    MinLength: 1
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
  WhitelistedIpAddressHEL:
    Type: String
    Default: 213.157.86.1/32
    MinLength: 1
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
  GitBranch:
    Description: Git branch to checkout
    Type: String
    Default: master
    MinLength: 1
  NumberOfSubnets:
    AllowedValues:
    - 2
    - 3
    - 4
    - 5
    - 6
    Default: 3
    Description: Number of subnets. This must match your selections in the list of load balancer subnets below.
    Type: String
  PublicALBSubnets:
    Description: The subnets to attach to the load balancer
    Type: List<AWS::EC2::Subnet::Id>
  PublicALBCertificate:
    AllowedPattern: ^(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$
    Description: 'The AWS Certification Manager certificate ARN for the ALB certificate'
    Type: String
  PublicALBCertificate2:
    AllowedPattern: ^$|(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$
    Description: '[Optional] 2nd AWS Certification Manager certificate ARN for the ALB certificate'
    Type: String
  PublicALBCertificate3:
    AllowedPattern: ^$|(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$
    Description: '[Optional] 3rd AWS Certification Manager certificate ARN for the ALB certificate'
    Type: String
  PublicALBCertificate4:
    AllowedPattern: ^$|(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$
    Description: '[Optional] 4th  AWS Certification Manager certificate ARN for the ALB certificate'
    Type: String
  Vpc:
    Description: Select an existing Vpc
    Type: AWS::EC2::VPC::Id
    MinLength: 1

Conditions:
  NumberOfSubnets1:
      !Equals [ 1, !Ref NumberOfSubnets ]
  NumberOfSubnets2:
      !Equals [ 2, !Ref NumberOfSubnets ]
  NumberOfSubnets3:
      !Equals [ 3, !Ref NumberOfSubnets ]
  NumberOfSubnets4:
      !Equals [ 4, !Ref NumberOfSubnets ]
  NumberOfSubnets5:
      !Equals [ 5, !Ref NumberOfSubnets ]
  NumberOfSubnets6:
      !Equals [ 6, !Ref NumberOfSubnets ]
  CreateCertificate2: !Not [!Equals [!Ref PublicALBCertificate2,  ""]]
  CreateCertificate3: !Not [!Equals [!Ref PublicALBCertificate3,  ""]]
  CreateCertificate4: !Not [!Equals [!Ref PublicALBCertificate4,  ""]]
  CreateAlternateDomainRecord: !Not [!Equals [!Ref HostedZoneIdAlternate, ""]]

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-c0cff0a6 # Ubuntu Server 16.04 LTS (HVM), SSD Volume Type
      KeyName: ytp-seeding-key
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 20
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub avoindata-${EnvironmentName}
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash

          export HOME=/root
          export DEBIAN_FRONTEND=noninteractive

          apt-get update
          apt-get -y dist-upgrade
          apt-get -y install libssl-dev libffi-dev python-dev python-pip git nfs-common
          pip install setuptools --upgrade
          pip install awscli ansible markupsafe

          echo '${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0' >>/etc/fstab
          echo '/mnt/ytp_files /srv/ytp/files none defaults,bind 0 0' >>/etc/fstab
          mount -a -t nfs4
          mkdir -p /srv/ytp/files /mnt/ytp_files
          mount /srv/ytp/files

          cd /root
          git clone -b ${GitBranch} https://github.com/yhteentoimivuuspalvelut/ytp.git

          cd /root/ytp/cloudformation/bootstrap
          ansible-playbook -i localhost, deploy.yml

          cd /root/ytp
          git submodule update --init --recursive

          aws s3 cp s3://avoindata-secrets/${EnvironmentName}/secrets.yml /root/avoindata-secrets/${EnvironmentName}/secrets.yml
          aws s3 cp s3://avoindata-secrets/${EnvironmentName}/token.dat /root/avoindata-secrets/${EnvironmentName}/token.dat
          aws s3 cp s3://avoindata-secrets/${EnvironmentName}/ssl/combined_star_avoindata_fi.crt /root/avoindata-secrets/${EnvironmentName}/ssl/combined_star_avoindata_fi.crt
          aws s3 cp s3://avoindata-secrets/${EnvironmentName}/ssl/combined_star_opendata_fi.crt /root/avoindata-secrets/${EnvironmentName}/ssl/combined_star_opendata_fi.crt
          aws s3 cp s3://avoindata-secrets/${EnvironmentName}/ssl/star_avoindata_fi.key /root/avoindata-secrets/${EnvironmentName}/ssl/star_avoindata_fi.key
          aws s3 cp s3://avoindata-secrets/${EnvironmentName}/ssl/star_opendata_fi.key /root/avoindata-secrets/${EnvironmentName}/ssl/star_opendata_fi.key

          chmod -R go-rwx /root/avoindata-secrets/*

          cd /root/ytp/ansible
          ansible-playbook -i inventories/${EnvironmentName} single-server.yml

          echo "Bootstrap done."

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP
      SecurityGroupIngress:
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddressTRE
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddressHEL
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 8983
          ToPort: 8983
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddressTRE
        - FromPort: 8983
          ToPort: 8983
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddressHEL

  DatabaseIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      GroupId: !Ref DatabaseSecurityGroup
      SourceSecurityGroupName: !Ref InstanceSecurityGroup


  EFSIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      GroupId: !Ref EFSSecurityGroup
      SourceSecurityGroupName: !Ref InstanceSecurityGroup


  DomainName:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub ${EnvironmentName}.avoindata.fi.
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt PublicALB.DNSName
        HostedZoneId: !GetAtt PublicALB.CanonicalHostedZoneID


  DomainNameAlternate:
    Type: AWS::Route53::RecordSet
    Condition: CreateAlternateDomainRecord
    Properties:
      Name: !Sub ${EnvironmentName}.opendata.fi.
      Type: A
      HostedZoneId: !Ref HostedZoneIdAlternate
      AliasTarget:
        DNSName: !GetAtt PublicALB.DNSName
        HostedZoneId: !GetAtt PublicALB.CanonicalHostedZoneID

  DomainNameWebHost:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub ${EnvironmentName}-web.avoindata.fi.
      Type: A
      TTL: "300"
      HostedZoneId: !Ref HostedZoneId
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub "arn:aws:s3:::avoindata-secrets/${EnvironmentName}/*"
              - Effect: Allow
                Action: "*"
                Resource:
                  - !Sub "arn:aws:s3:::avoindata-${EnvironmentName}-datasets"
                  - !Sub "arn:aws:s3:::avoindata-${EnvironmentName}-datasets/*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  PublicALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub avoindata-${EnvironmentName}-loadbalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref PublicALBSecurityGroup
      Subnets:
        !If
          [ NumberOfSubnets1,
          [ !Select [ 0, !Ref PublicALBSubnets ] ],
          !If
            [ NumberOfSubnets2,
            [ !Select [ 0, !Ref PublicALBSubnets ], !Select [ 1, !Ref PublicALBSubnets ] ],
            !If
              [ NumberOfSubnets3,
              [ !Select [ 0, !Ref PublicALBSubnets ], !Select [ 1, !Ref PublicALBSubnets ], !Select [ 2, !Ref PublicALBSubnets ] ],
              !If
                [ NumberOfSubnets4,
                [ !Select [ 0, !Ref PublicALBSubnets ], !Select [ 1, !Ref PublicALBSubnets ], !Select [ 2, !Ref PublicALBSubnets ], !Select [ 3, !Ref PublicALBSubnets ] ],
                !If
                  [ NumberOfSubnets5,
                  [ !Select [ 0, !Ref PublicALBSubnets ], !Select [ 1, !Ref PublicALBSubnets ], !Select [ 2, !Ref PublicALBSubnets ], !Select [ 3, !Ref PublicALBSubnets ], !Select [ 4, !Ref PublicALBSubnets ] ],
                  [ !Select [ 0, !Ref PublicALBSubnets ], !Select [ 1, !Ref PublicALBSubnets ], !Select [ 2, !Ref PublicALBSubnets ], !Select [ 3, !Ref PublicALBSubnets ], !Select [ 4, !Ref PublicALBSubnets ], !Select [ 5, !Ref PublicALBSubnets ] ]
                  ]
                ]
              ]
            ]
          ]
      Tags:
        - Key: Name
          Value: !Sub avoindata-${EnvironmentName}-loadbalancer

  PublicALBListenerNoSslCertificate:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref PublicALBTargetGroupHTTP
      # Commented out as redirect is not yet supported by cf
      #   - Type: redirect
      #     RedirectConfig:
      #       Host: "#{host}"
      #       Path: "/#{path}"
      #       Query: "#{query}"
      #       StatusCode: "HTTP_301"
      #       Protocol: "HTTPS"
      #       Port: "443"
      LoadBalancerArn: !Ref PublicALB
      Port: 80
      Protocol: HTTP

  PublicALBListenerSslCertificate:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref PublicALBCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicALBTargetGroup
      LoadBalancerArn: !Ref PublicALB
      Port: 443
      Protocol: HTTPS

  PublicALBListener2ndCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Condition: CreateCertificate2
    Properties:
      Certificates:
        - CertificateArn: !Ref PublicALBCertificate2
      ListenerArn: !Ref PublicALBListenerSslCertificate

  PublicALBListener3rdCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Condition: CreateCertificate3
    Properties:
      Certificates:
        - CertificateArn: !Ref PublicALBCertificate3
      ListenerArn: !Ref PublicALBListenerSslCertificate

  PublicALBListener4thCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Condition: CreateCertificate4
    Properties:
      Certificates:
        - CertificateArn: !Ref PublicALBCertificate4
      ListenerArn: !Ref PublicALBListenerSslCertificate

  PublicALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /fi
      HealthCheckPort: '443'
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: !Sub avoindata-${EnvironmentName}-targetGroup
      Port: 443
      Protocol: HTTPS
      Tags:
        - Key: Name
          Value: !Sub avoindata-${EnvironmentName}-loadbalancer-targetGroup-https
      Targets:
        - Id: !Ref EC2Instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc

  PublicALBTargetGroupHTTP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '301'
      Name: !Sub avoindata-${EnvironmentName}-tg-http
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub avoindata-${EnvironmentName}-loadbalancer-targetGroup-http
      Targets:
        - Id: !Ref EC2Instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc

  PublicALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS from everywhere
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc


Outputs:
  InstanceId:
    Value: !Ref EC2Instance
  PublicDNS:
    Value: !GetAtt EC2Instance.PublicDnsName
  SiteURL:
    Value: !Sub https://${EnvironmentName}.avoindata.fi
  SiteURLAlternate:
    Value: !Sub https://${EnvironmentName}.opendata.fi
  AZ:
    Value: !GetAtt EC2Instance.AvailabilityZone
  PublicIP:
    Value: !GetAtt EC2Instance.PublicIp
  PublicALBDNSName:
    Value: !GetAtt PublicALB.DNSName
