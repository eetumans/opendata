version: 2
jobs:
  flake8:
    docker:
      - image: circleci/python:2.7.15

    working_directory: ~/repo

    steps:
      - checkout
      - run: git submodule update --init --recursive

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "codestyle-requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Install codestyle requirements
          command: |
            mkdir -p ./venv
            virtualenv ./venv
            . venv/bin/activate
            pip install -r codestyle-requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "codestyle-requirements.txt" }}

      - run:
          name: run linting
          command: |
            . venv/bin/activate
            flake8 modules --count --max-line-length=127 --statistics

  code-sniffer:
    docker:
      - image: circleci/php:7.1

    steps:
      - checkout

      - run: sudo apt update && sudo apt install zlib1g-dev libsqlite3-dev libpng-dev
      - run: sudo docker-php-ext-install zip
      - run: sudo docker-php-ext-install gd

      # composer cache
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "~/project/ansible/roles/drupal/files/drupal8/composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          command: composer install -n --prefer-dist
          working_directory: ~/project/ansible/roles/drupal/files/drupal8/

      - run:
          name: Ignore warnings on exit code
          command: ./vendor/bin/phpcs --config-set ignore_warnings_on_exit 1
          working_directory: ~/project/ansible/roles/drupal/files/drupal8/

      - run:
          name: Run codesniffer for drupal standard
          command: ./vendor/bin/phpcs --standard=Drupal  ~/project/modules --ignore=ckanext*,ytp-assets-common
          working_directory: ~/project/ansible/roles/drupal/files/drupal8/

      - run:
          name: Run codesniffer for drupal practice
          command: ./vendor/bin/phpcs --standard=DrupalPractice  ~/project/modules --ignore=ckanext*,ytp-assets-common
          working_directory: ~/project/ansible/roles/drupal/files/drupal8/

      - save_cache:
          key: composer-v1-{{ checksum "~/project/ansible/roles/drupal/files/drupal8/composer.json" }}
          paths:
            - vendor

  ansible-lint:
    docker:
      - image: circleci/python

    steps:
      - checkout

      - run: sudo pip install ansible-lint

      - run:
          name: Run ansible-lint for single-server.yml
          command: ansible-lint single-server.yml
          working_directory: ~/project/ansible/

  packer-web:
    docker:
      - image: circleci/python

    steps:
      - checkout
      - run: git submodule update --init --recursive
      - run: sudo apt-get update && sudo apt-get install rsync
      - run: sudo pip install ansible

      - run: |
          mkdir ~/logs

      - run:
          name: Install packer
          command: wget https://releases.hashicorp.com/packer/1.3.5/packer_1.3.5_linux_amd64.zip -O /tmp/packer.zip && sudo unzip /tmp/packer.zip -d /usr/local/bin/

      - run:
          name: Validate packer file
          command: packer validate ../packer/packer-web.json
          working_directory: ~/project/ansible

      - run:
          name: Build ami
          command: "packer build ../packer/packer-web.json >> ~/logs/packer_build.log 2>&1"
          no_output_timeout: 60m
          working_directory: ~/project/ansible

      - persist_to_workspace:
          name: Save packer-web manifest
          root: ~/project
          paths:
            - ansible/manifest-web.json

      - run:
          name: Save ami id to file
          command: cat manifest-web.json | jq -r .builds[0].artifact_id |  cut -d':' -f2 > ~/project/web_ami_id
          working_directory: ~/project/ansible

      - store_artifacts:
          path: ~/logs

      - store_artifacts:
          path: ~/project/web_ami_id

      - persist_to_workspace:
          name: web_ami_id
          root: ~/project
          paths:
            - web_ami_id

  ansible-web:
    docker:
      - image: circleci/python

    steps:
      - checkout
      - run: git submodule update --init --recursive
      - run: sudo apt-get update && sudo apt-get install rsync
      - run: sudo pip install boto awscli
      - run: sudo pip install ansible

      - run:
          name: Copy private key for ec2 usage
          command: aws s3 cp --quiet s3://$AWS_PRIVATE_KEY_S3_PATH ~/.ssh/id_rsa
          working_directory: ~/project/

      - run: |
          mkdir ~/logs

      - attach_workspace:
          at: ~/project

      - run:
          name: Set ami id
          command: |
            echo 'export AWS_EC2_IMAGE=$(cat ~/project/web_ami_id)' >> $BASH_ENV

      - run:
          name: Run build test playbook
          command: "ansible-playbook --skip-tags 'dependency_role' --tags 'configure' circleci_build_test.yml >> ~/logs/ansible-web_test.log 2>&1"
          no_output_timeout: 60m
          working_directory: ~/project/ansible

      - run: |
          cp /tmp/instance_public_ip ~/project/
          cp /tmp/instance_ids ~/project/

      - persist_to_workspace:
          name: public ip
          root: ~/project
          paths:
            - instance_public_ip
            - instance_ids

      - store_artifacts:
          path: ~/logs

  cypress-web:
    docker:
      - image: circleci/python

    steps:
      - checkout
      - run: git submodule update --init --recursive
      - run: sudo pip install boto awscli
      - run: sudo pip install ansible

      - restore_cache:
          keys:
            - v1-deps-{{ .Branch }}-{{ checksum "package.json" }}
            - v1-deps-{{ .Branch }}
            - v1-deps

      - run: |
          mkdir ~/logs

      - attach_workspace:
          at: ~/project

      - run: sudo apt-get install xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2

      - run: curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -

      - run: sudo apt-get install -y nodejs

      - run:
          name: Install Dependencies
          command: npm ci
          working_directory: ~/project/

      - save_cache:
          key: v1-deps-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ~/.npm
            - ~/.cache

      - run:
          name: Set instance public for Cypress
          command: |
            echo 'export CYPRESS_BASE_URL=http://$(cat ~/project/instance_public_ip)' >> $BASH_ENV
            echo 'export CYPRESS_resetDB=false' >> $BASH_ENV
            echo 'export CYPRESS_cloudStorageEnabled=true' >> $BASH_ENV

      - run:
          name: Run cypress tests
          command: $(npm bin)/cypress run --record --key $CYPRESS_KEY

        # Cleanup task to ensure that created instances will be terminated.
      - run:
          name: Additional cleanup for EC2 instances
          command: "ansible-playbook ansible/circleci_cleanup.yml  --extra-vars 'instance_ids_file_path=~/project/instance_ids' >> ~/logs/ec2_cleanup.log 2>&1"
          working_directory: ~/project/
          when: always

      - store_artifacts:
          path: ~/logs

  packer-scheduled:
    docker:
      - image: circleci/python

    steps:
      - checkout
      - run: git submodule update --init --recursive
      - run: sudo apt-get update && sudo apt-get install rsync
      - run: sudo pip install boto awscli
      - run: sudo pip install ansible

      - run: |
          mkdir ~/logs

      - attach_workspace:
          at: ~/project

      - run:
          name: Install packer
          command: wget https://releases.hashicorp.com/packer/1.3.5/packer_1.3.5_linux_amd64.zip -O /tmp/packer.zip && sudo unzip /tmp/packer.zip -d /usr/local/bin/

      - run:
          name: Validate packer file
          command: packer validate ../packer/packer-scheduled.json
          working_directory: ~/project/ansible

      - run:
          name: Build ami
          command: "packer build ../packer/packer-scheduled.json >> ~/logs/packer_build.log 2>&1"
          no_output_timeout: 60m
          working_directory: ~/project/ansible

      - persist_to_workspace:
          name: Save packer-scheduled manifest
          root: ~/project
          paths:
            - ansible/manifest-scheduled.json

      - run:
          name: Save ami id to file
          command: cat manifest-scheduled.json | jq -r .builds[0].artifact_id |  cut -d':' -f2 > ~/project/scheduled_ami_id
          working_directory: ~/project/ansible

      - store_artifacts:
          path: ~/logs

      - store_artifacts:
          path: ~/project/scheduled_ami_id

      - persist_to_workspace:
          name: scheduled_ami_id
          root: ~/project
          paths:
            - scheduled_ami_id

  stylelint:
    docker:
      - image: circleci/node

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-deps-{{ .Branch }}-{{ checksum "modules/ytp-assets-common/package.json" }}
            - v1-deps-{{ .Branch }}
            - v1-deps

      - run:
          name: Install Dependencies
          command: npm install --only=dev
          working_directory: ~/project/modules/ytp-assets-common

      - save_cache:
          key: v1-deps-{{ .Branch }}-{{ checksum "modules/ytp-assets-common/package.json" }}
          paths:
            - ~/.npm
            - ~/.cache
            - ~/project/modules/ytp-assets-common/node_modules

      - run:
          name: run stylelint
          command: $(npm bin)/stylelint "src/less"
          working_directory: ~/project/modules/ytp-assets-common

  copy-web-ami:
    docker:
      - image: circleci/python

    steps:
      - checkout

      - run: sudo pip install boto awscli

      - run: |
          mkdir ~/logs

      - attach_workspace:
          at: ~/project

      - run:
          name: Copy AMI to production account
          command: |
            ./copy_ami.sh ~/project/ansible/manifest-web.json | tail -1 | cut -d'"' -f2 > ~/project/web_image_ami_copy
          no_output_timeout: 10m
          working_directory: ~/project/amicopy

      - persist_to_workspace:
          root: ~/project
          paths:
            - web_image_ami_copy

  copy-scheduled-ami:
    docker:
      - image: circleci/python

    steps:
      - checkout

      - run: |
          mkdir ~/logs

      - attach_workspace:
          at: ~/project

      - run: sudo pip install boto awscli

      - run:
          name: Copy AMI to production account
          command: |
            ./copy_ami.sh ~/project/ansible/manifest-scheduled.json | tail -1 | cut -d'"' -f2 > ~/project/scheduled_image_ami_copy
          no_output_timeout: 10m
          working_directory: ~/project/amicopy

      - persist_to_workspace:
          root: ~/project
          paths:
            - scheduled_image_ami_copy

  beta-deploy:
    docker:
      - image: circleci/python

    steps:

      - checkout

      - run: sudo pip install boto awscli

      - run: |
          mkdir ~/logs

      - attach_workspace:
          at: ~/project

      - run:
          name: Check current stack update status
          command: |
            source ~/project/deploy/assume_dev_deploy_role.sh > /dev/null 2>&1
            until aws cloudformation describe-stacks --stack-name "beta-asg-lt" --query 'Stacks[0].StackStatus' | egrep -q 'COMPLETE"$'; do sleep 5 ; done
          no_output_timeout: 15m

      - run:
          name: Update AMI ids in parameter store
          command: |
            source ~/project/deploy/assume_dev_deploy_role.sh > /dev/null 2>&1
            aws ssm put-parameter --name /beta/web/amiid --type String --overwrite --allowed-pattern "^ami-[a-z0-9]{17}$" --value $(cat ~/project/web_ami_id) && \
            aws ssm put-parameter --name /beta/scheduled/amiid --type String --overwrite --allowed-pattern "^ami-[a-z0-9]{17}$" --value $(cat ~/project/scheduled_ami_id)

      - run:
          name: Update stack
          command: |
            source ~/project/deploy/assume_dev_deploy_role.sh > /dev/null 2>&1
            aws cloudformation update-stack \
            --stack-name "beta-asg-lt" \
            --template-body file://../cloudformation/launchtemplate.yml \
            --parameters ParameterKey=WebTargetGroupArn,ParameterValue=/beta/web/public_alb_tg_arn \
              ParameterKey=WebInstanceType,ParameterValue=/beta/web/instance_type \
              ParameterKey=WebHealthCheckGracePeriod,ParameterValue=/beta/web/albgraceperiod \
              ParameterKey=WebAmiImageId,ParameterValue=/beta/web/amiid \
              ParameterKey=SolrTargetGroupArn,ParameterValue=/beta/web/private_alb_tg_arn \
              ParameterKey=ScheduledInstanceType,ParameterValue=/beta/scheduled/instance_type \
              ParameterKey=ScheduledAmiImageId,ParameterValue=/beta/scheduled/amiid \
              ParameterKey=ScheduledHealthCheckGracePeriod,ParameterValue=/beta/scheduled/albgraceperiod \
              ParameterKey=HookTimeout,ParameterValue=/beta/web/lifecycle_hook_timeout \
              ParameterKey=EnvironmentName,ParameterValue=/beta/web/environment_name \
              ParameterKey=EFSFileSystem,ParameterValue=/beta/web/efs_file_system \
              ParameterKey=AsgDesiredSize,ParameterValue=/beta/web/asgdesiredsize \
              ParameterKey=AsgMinSize,ParameterValue=/beta/web/asgminsize \
              ParameterKey=AsgMaxSize,ParameterValue=/beta/web/asgmaxsize > ~/logs/beta_stack_update.log 2>&1
            aws cloudformation wait stack-update-complete --stack-name "beta-asg-lt"
          working_directory: ~/project/deploy
          no_output_timeout: 30m

      - store_artifacts:
          path: ~/logs

  clamav-build:
    docker:
      - image: circleci/python
    steps:
      - checkout

      - setup_remote_docker

      - run: sudo pip install boto awscli aws-sam-cli

      - run:
          name: Build and tag ClamAV container
          command: |
            docker build -t clamav-scanner:latest ~/project/clamav/clamav-docker

      - run:
          name: Build lambdas
          command: |
            sam build -s ~/project/clamav/src
          working_directory: ~/project/clamav

  clamav-deploy:
    docker:
      - image: circleci/python
    steps:
      - checkout

      - setup_remote_docker

      - run: sudo pip install boto awscli aws-sam-cli

      - run:
          name: Build, tag and deploy ClamAV container
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            docker build -t clamav-scanner:latest ~/project/clamav/clamav-docker &&\
            $(aws ecr get-login --no-include-email --region eu-west-1) &&\
            docker tag clamav-scanner:latest ${AWS_PRODUCTION_ACCOUNT_ID}.dkr.ecr.eu-west-1.amazonaws.com/clamav-scanner:latest &&\
            docker push $_

      - run:
          name: Build lambdas
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            sam build -s ~/project/clamav/src
          working_directory: ~/project/clamav

      - run:
          name: Package SAM template
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            sam package --output-template-file packaged.yaml \
            --s3-bucket avoindata-clamav-scan
          working_directory: ~/project/clamav

      - run:
          name: Deploy SAM template
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            aws cloudformation deploy --template-file packaged.yaml \
            --stack-name clamav-scan \
            --parameter-overrides \
              SlackPath=/clamav/slack_path \
              SlackChannel=/clamav/slack_channel \
              SlackUser=/clamav/slack_user \
            --capabilities CAPABILITY_IAM
          working_directory: ~/project/clamav

  prod-deploy:
    docker:
      - image: circleci/python

    steps:

      - checkout

      - run: |
          mkdir ~/logs

      - run: sudo pip install boto awscli

      - run:
          name: Check current stack update status
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            until aws cloudformation describe-stacks --stack-name "prod-asg-lt" --query 'Stacks[0].StackStatus' | egrep -q 'COMPLETE"$'; do sleep 5 ; done
          no_output_timeout: 20m

      - run:
          name: Check AMI copy completion
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            until aws ec2 describe-images \
            --filters \
              "Name=tag:Commit,Values=${CIRCLE_SHA1}" \
              "Name=name,Values=opendata-web*" \
            --query 'Images[0].State' |grep -q "\"available\""; do sleep 5 ; done && \
            until aws ec2 describe-images \
            --filters \
              "Name=tag:Commit,Values=${CIRCLE_SHA1}" \
              "Name=name,Values=opendata-scheduled*" \
            --query 'Images[0].State' |grep -q "\"available\""; do sleep 5 ; done
          no_output_timeout: 30m

      - run:
          name: Update AMI id parameter in parameter store
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            export web_ami_id=$(aws ec2 describe-images \
              --filters \
                "Name=tag:Commit,Values=${CIRCLE_SHA1}" \
                "Name=name,Values=opendata-web*" \
              --query "Images[0].ImageId" | sed 's/"//g')
            export scheduled_ami_id=$(aws ec2 describe-images \
              --filters \
                "Name=tag:Commit,Values=${CIRCLE_SHA1}" \
                "Name=name,Values=opendata-scheduled*" \
              --query "Images[0].ImageId" | sed 's/"//g')
            aws ssm put-parameter --name /prod/web/amiid --type String --overwrite --allowed-pattern "^ami-[a-z0-9]{17}$" --value $web_ami_id
            aws ssm put-parameter --name /prod/scheduled/amiid --type String --overwrite --allowed-pattern "^ami-[a-z0-9]{17}$" --value $scheduled_ami_id

      - run:
          name: Update Cloudformation stack
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            aws cloudformation update-stack \
            --stack-name "prod-asg-lt" \
            --template-body file://../cloudformation/launchtemplate.yml \
            --parameters ParameterKey=WebTargetGroupArn,ParameterValue=/prod/web/public_alb_tg_arn \
              ParameterKey=WebInstanceType,ParameterValue=/prod/web/instance_type \
              ParameterKey=WebHealthCheckGracePeriod,ParameterValue=/prod/web/albgraceperiod \
              ParameterKey=WebAmiImageId,ParameterValue=/prod/web/amiid \
              ParameterKey=SolrTargetGroupArn,ParameterValue=/prod/web/private_alb_tg_arn \
              ParameterKey=ScheduledInstanceType,ParameterValue=/prod/scheduled/instance_type \
              ParameterKey=ScheduledAmiImageId,ParameterValue=/prod/scheduled/amiid \
              ParameterKey=ScheduledHealthCheckGracePeriod,ParameterValue=/prod/scheduled/albgraceperiod \
              ParameterKey=HookTimeout,ParameterValue=/prod/web/lifecycle_hook_timeout \
              ParameterKey=EnvironmentName,ParameterValue=/prod/web/environment_name \
              ParameterKey=EFSFileSystem,ParameterValue=/prod/web/efs_file_system \
              ParameterKey=AsgDesiredSize,ParameterValue=/prod/web/asgdesiredsize \
              ParameterKey=AsgMinSize,ParameterValue=/prod/web/asgminsize \
              ParameterKey=AsgMaxSize,ParameterValue=/prod/web/asgmaxsize > ~/logs/prod_stack_update.log 2>&1
            aws cloudformation wait stack-update-complete --stack-name "prod-asg-lt"
          working_directory: ~/project/deploy
          no_output_timeout: 30m

      - store_artifacts:
          path: ~/logs

workflows:
  version: 2
  lint_build_test:
    jobs:
      - flake8
      - code-sniffer
      - ansible-lint
      - stylelint
      - clamav-build
      - clamav-deploy:
          requires:
            - clamav-build
          filters:
            branches:
              only: master
      - packer-web:
          requires:
            - flake8
            - code-sniffer
            - ansible-lint
            - stylelint
      - ansible-web:
          requires:
            - packer-web
      - cypress-web:
          requires:
            - ansible-web
      - packer-scheduled:
          requires:
            - flake8
            - code-sniffer
            - ansible-lint
            - stylelint
      - copy-web-ami:
          requires:
            - cypress-web
            - packer-scheduled
          filters:
            branches:
              only: master
      - copy-scheduled-ami:
          requires:
            - packer-scheduled
            - cypress-web
          filters:
            branches:
              only: master
      - beta-deploy:
          requires:
            - cypress-web
            - packer-scheduled
          filters:
            branches:
              only: master
  # prod_deploy:
  #   jobs:
  #     - prod-deploy:
  #         filters:
  #           tags:
  #             only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
  #           branches:
  #             ignore: /.*/
