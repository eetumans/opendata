<?php
/**
 * @file
 * Creates following blocks on front page:
 * * categories of open data
 * * news
 * * Twitter feed
 * * latest datasets
 * * popular datasets
 * * related sites
 */

/**
 * Implements hook_block_info().
 */
function ytp_frontpage_block_info() {
  $blocks = array();
  $blocks['dataset_categories'] = array(
    'info' => t('Categories'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['latest_datasets'] = array(
    'info' => t('Latest datasets'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['popular_datasets'] = array(
    'info' => t('Most popular datasets'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['twitter_feed'] = array(
    'info' => t('Twitter @avoindatafi'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ytp_frontpage_block_view($delta = '') {
  if ($delta == 'dataset_categories') {
    $block['title'] = t('Categories of open data');
    $block['content'] = theme('dataset_category_list', array(
     'dataset_categories' => get_dataset_categories(),
    ));
    return $block;

  }
  elseif ($delta == 'latest_datasets') {
    $block['title'] = t('Latest datasets');
    $block['content'] = theme('dataset_list_short', array(
      'datasets' => get_datasets('latest', 'desc', 5),
    ));
    return $block;
  }
  elseif ($delta == 'popular_datasets') {
    $block['title'] = t('Most popular datasets');
    $block['content'] = theme('dataset_list_short', array(
      'datasets' => get_datasets('popular', 'desc', 5),
    ));
    return $block;
  }
  elseif ($delta == 'twitter_feed') {
    // Code based on https://www.drupal.org/project/twitter_block
    $block['title'] = t('Twitter @avoindatafi');
    $block['content'] = array(
      '#theme' => 'link',
      '#text' => 'Twitter @avoindatafi',
      '#path' => 'https://twitter.com/avoindatafi',
      '#options' => array(
        'attributes' => array(
          'class' => array('twitter-timeline'),
          'data-widget-id' => variable_get('twitter_widget_id', ''),
          'data-theme' => 'ytp_theme',
          'data-chrome' => 'noheader nofooter noborders noscrollbar transparent',
          'data-tweet-limit' => 2,
        ),
        'html' => FALSE,
      ),
      '#attached' => array(
        'js' => array(
          'https://platform.twitter.com/widgets.js' => array(
            'type' => 'external',
          ),
        ),
      ),
    );
    return $block;
  }
}

/**
 * Implements hook_help().
 */
function ytp_frontpage_help($path, $arg) {
    if ($path == 'admin/help#ytp_frontpage') {
        return t('Creates blocks for front page. The blocks will display 
          categories of open data, news, Twitter feed, latest datasets, 
          most popular datasets and related sites.');
    }
}

/**
 * Implements hook_preprocess_block().
 */
function ytp_frontpage_preprocess_block(&$variables, $hook) {
  global $language;

  $icon = "";
  $url = "";

  switch ($variables['block']->delta) {
    case 'news-block':
      $icon = 'newspaper-o';
      $url = $language->language . '/articles';
      break;
    case 'twitter_feed':
      $icon = 'twitter';
      $url = 'https://twitter.com/avoindatafi';
      break;
    case 'latest_datasets':
      $icon = 'file-text';
      $url = '../data/' . $language->language . '/dataset?q=&sort=metadata_created+desc';
      break;
    case 'popular_datasets':
      $icon = 'star';
      $url = '../data/' . $language->language . '/dataset?q=&sort=views_recent+desc';
      break;
    case 'related-sites':
      $icon = 'link';
      break;
  }

  if ($icon) {
    $variables['block']->subject = '<i class="fa fa-' . $icon . ' title-icon"></i> ' . $variables['block']->subject;
  }

  if ($url) {
    $variables['block']->subject = '<a href="' . $url . '">' . $variables['block']->subject . '</a>';
  }

}

/**
 * Implements hook_theme().
 */
function ytp_frontpage_theme() {
  return array(
    'dataset_list_short' => array(),
    'dataset_category_list' => array(),
  );
}

/**
 * Implements hook_variable_info().
 */
function ytp_frontpage_variable_info($options)
{
  $variables['twitter_widget_id'] = array(
    'type' => 'string',
    'title' => t('Twitter widget ID'),
    'default' => '',
    'description' => t('Twitter widget ID for displaying tweets on front page', array(), $options),
    'localize' => 'FALSE',
    );
  return $variables;
}

/**
 * Implements hook_views_api().
 */
function ytp_frontpage_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'ytp_frontpage')
  );
}

/**
 * Implaments hook_views_default_views().
 */
function ytp_frontpage_views_default_views() {
  $view = new view();
  $view->name = 'news';
  $view->description = '';
  $view->tag = 'default';
  $view->base_table = 'node';
  $view->human_name = 'News';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = 'News';
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'some';
  $handler->display->display_options['pager']['options']['items_per_page'] = '4';
  $handler->display->display_options['pager']['options']['offset'] = '0';
  $handler->display->display_options['style_plugin'] = 'default';
  $handler->display->display_options['row_plugin'] = 'fields';
  /* Field: Content: Post date */
  $handler->display->display_options['fields']['created']['id'] = 'created';
  $handler->display->display_options['fields']['created']['table'] = 'node';
  $handler->display->display_options['fields']['created']['field'] = 'created';
  $handler->display->display_options['fields']['created']['label'] = '';
  $handler->display->display_options['fields']['created']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['created']['date_format'] = 'custom';
  $handler->display->display_options['fields']['created']['custom_date_format'] = 'd.m.';
  $handler->display->display_options['fields']['created']['second_date_format'] = 'long';
  /* Field: Content: Title */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'node';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['label'] = '';
  $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
  /* Sort criterion: Content: Post date */
  $handler->display->display_options['sorts']['created']['id'] = 'created';
  $handler->display->display_options['sorts']['created']['table'] = 'node';
  $handler->display->display_options['sorts']['created']['field'] = 'created';
  $handler->display->display_options['sorts']['created']['order'] = 'DESC';
  /* Filter criterion: Content: Published */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Filter criterion: Content: Type */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'article' => 'article',
  );
  /* Filter criterion: Content: Language */
  $handler->display->display_options['filters']['language']['id'] = 'language';
  $handler->display->display_options['filters']['language']['table'] = 'node';
  $handler->display->display_options['filters']['language']['field'] = 'language';
  $handler->display->display_options['filters']['language']['value'] = array(
    '***CURRENT_LANGUAGE***' => '***CURRENT_LANGUAGE***',
  );

  /* Display: Block */
  $handler = $view->new_display('block', 'Block', 'block');

  $views[$view->name] = $view;
  return $views;

}

/**
 * Use CKAN package_search to get datasets
 * Parameters
 *  - $type: sort type: 'latest' or 'popular' (defaults to 'relevance')
 *  - $order: sort order: 'desc' or 'asc' (defaults to 'asc')
 *  - $amount: amount of datasets shown: integer
 */
function get_datasets($type, $order, $amount) {

  // Figure out sort type
  $sort = 'relevance'; // default solr sort
  switch ($type) {
    case 'latest':
      $sort = 'metadata_created';
      break;

    case 'popular':
      $sort = 'views_recent';
      break;
  }

  // Figure out sort order
  if ($order != 'desc') {
    $order = 'asc'; // default solr sort order
  }

  // Figure out amount of datasets shown
  $amount = is_int($amount) ? $amount : 5; // default: get 5 datasets

  $url = 'http://localhost:8080/data/api/3/action/package_search?sort=' . $sort . '+' . $order . '&rows=' . $amount;
  $options = array(
    'method' => 'GET'
  );

  $result = drupal_http_request($url, $options);
  $json = drupal_json_decode($result->data);

  return $json["result"]['results'];
}

/**
 * Use CKAN group_list to get data categories (CKAN groups).
 */
function get_dataset_categories() {
  $url = 'http://localhost:8080/data/api/3/action/group_list?all_fields=true';
  $options = array(
    'method' => 'GET'
  );

  $result = drupal_http_request($url, $options);
  $json = drupal_json_decode($result->data);

  return $json["result"];
}

/** 
 * Theme function to format front page dataset lists
 */
function theme_dataset_list_short($variables) {
  global $language;
  $output = '<ul class="dataset-title-list">';

  foreach ($variables['datasets'] as $dataset) {
    $output .= '<li><a href="/data/' . $language->language . '/dataset/' . $dataset['name'] . '">' . $dataset['title'] . '</a></li>';
  }

  $output .= '</ul>';
  return $output;
}

/**
 * Theme function to format front page categories display
 */
function theme_dataset_category_list($variables) {
  global $language;

  $num_of_col = 6; // How many categories should be displayed on one row
  $colspan = intval(12 / $num_of_col); // How many Bootstrap columns one item spans
  $col_counter = 1;

  $output = '<div class="container-fluid categories-container">';

  foreach ($variables['dataset_categories'] as $cat) {
    // If title is available in  current language, use it.
    // Otherwise fall back to default title.
    $title = !empty($cat["title_translated"][$language]) 
      ? $cat["title_translated"][$language] 
      : $cat["title"];

    // First row item starts the row
    if ($col_counter % $num_of_col == 1) {
      $output .= '<div class="row">';
    }

    $output .= '<div class="col-sm-' . $colspan. ' category-container">';
    $output .= '<a href="../data/' . $language->language . '/group/' . $cat["name"] . '"><img src="' . $cat["image_display_url"] . '" alt="' . $cat["title"] . '" class="category-image"></a>';
    $output .= '<p class="text-center"><a href="../data/'. $language->language . '/group/' . $cat["name"] . '">' . $title . '</a></p></div>';

    // Every nth item closes row
    if ($col_counter % $num_of_col == 0) {
      $output .= '</div>';
    }

    $col_counter++;

  }

  // Close row, if still open
  if (count($variables['dataset_categories']) % $num_of_col != 1) {
    $output .= '</div>';
  }

  // Close container
  $output .= "</div>";

  return $output;
}
